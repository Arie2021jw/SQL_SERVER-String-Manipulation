Exercise #5: Convert delimited lists separated by commas into a list of multiple values that can be passed to the IN clause and used in the WHERE clause.


Solution #1: We use a similar logic applied on previous Exercise #4 to column "DelimitedListCityName", to create a column with delimited lists of City names separated by commas and grouped by country (using column "CountryRegionCode").

Tables used:
1) [AdventureWorks2022].[Person].[Address]
2) [AdventureWorks2022].[Person].[StateProvince]
3) [AdventureWorks2022].[Sales].[SalesTerritory]


Query #1: Retrieving values from column PersonAddress.City (horizontally) in a delimited list by commas, instead of vertically, using subqueries
		+ 7 Subqueries
		+ 2 Cartesian Products
		+ 2 Iterations
		+ Window Function: ROW_NUMBER() OVER(ORDER BY )
		+ Functions: SUBSTRING, CHARINDEX, LEN, STRING_AGG, CONVERT, NVARCHAR(max), CHAR
		+ SELECT DISTINCT

SELECT AddressLine1
FROM [AdventureWorks2022].[Person].[Address] 
WHERE City IN (
    SELECT SUBSTRING(SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne.SUBSTDelimCityName, 2) - 2) AS CityName		-- SubstringTwo5
    FROM (
	    SELECT SUBSTRING(Z.DelimListCityName, Iteration.Position, LEN(Z.DelimListCityName)) AS SUBSTDelimCityName	-- SubstringOne4
	    FROM 
		(	
		SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Y.City), CHAR(44)) + ',' AS DelimListCityName		-- DelimListCities3 = Z
		FROM	
			(
			SELECT DISTINCT X.City				-- UniqueCityName2 = Y
			    , X.CountryRegionCode
			FROM
				(
				SELECT 					-- OriginalTables1 = X
				PersonAddress.AddressID
				, PersonAddress.City
				, PersonAddress.StateProvinceID
				, StateID.StateProvinceCode
				, StateID.CountryRegionCode
				, StateID.TerritoryID
				, SalesTerritory.Name AS TerritoryName
				FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
				LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
					ON PersonAddress.StateProvinceID = StateID.StateProvinceID
				LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
					ON StateID.TerritoryID = SalesTerritory.TerritoryID			-- OriginalTables1 = X
				) AS X										-- UniqueCityName2 = Y
			) AS Y	
			GROUP BY Y.CountryRegionCode					-- DelimitedListCities3 = Z 
			) AS Z,
			(
			SELECT ROW_NUMBER() OVER(ORDER BY AddressID) AS Position	-- Iteration3
			FROM [AdventureWorks2022].[Person].[Address]
			) AS Iteration							-- Iteration3
	    WHERE Iteration.Position <= LEN(Z.DelimListCityName)			-- SubstringOne4
	    ) AS SubstringOne
	WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','
    )
ORDER BY City


	-- OUTPUT
City		AddressLine1
Abingdon	New Millhouse, 2583 Milton Park
Albany		1619 Mills Dr.
Albany		2255 254th Avenue Se
Albany		9098 Story Lane
Albany		Heritage Mall
.......................................... TRUNCATED RESULTS .........
Berlin		8783 Detroit Ave.
Berlin		Alderstr 3955
.......................................... TRUNCATED RESULTS .........
London		1005 Valley Oak Plaza
London		1019 Mt. Davidson Court
.......................................... TRUNCATED RESULTS .........
 aNew York	123 Union Square South
New York	2596 Big Canyon Road
.......................................... TRUNCATED RESULTS .........
York		2050 B Avenue I
Zeeland		855 East Main Avenue
(19614 rows affected)
(end of results)



	Explanation for solution #1:
	---------------------------
We use multiple subqueries:
1) Subquery "X": uses tables from database [AdventureWorks2022]. 
For guidance we call it "OriginalTables1". This subquery is at Level 1.

2) Subquery "Y": removes duplicated City names from Subquery X using SELECT DISTINCT statement.
For guidance we call it "UniqueCityName2".
This subquery is at Level 2.

3) Subquery "Z": this query:
a) concatenates the DISTINCT City values FROM Subquery Y and groups them by CountryRegionCode, THEN, 
b) adds a comma before and after each DISTINCT City value from Subquery Y. 
It returns the same OUTPUT as in Exercise #4 (a total of 6 rows) with 1 comma before and after each delimited list.
This subquery is at Level 3.

4) Subquery "Iteration": this query:
Uses Window Function ROW_NUMBER() which returns a list of sequential numbers, starting at 1 for the first row in each partition, ending at 19,614.
19,614 is the number of rows in table [AdventureWorks2022].[Person].[Address].
This subquery is at Level 3.


5) Subquery SubstringOne: the function SUBSTRING (#1) extracts the delimited lists created by Subquery Z, and returns a total of 117,684 rows = 6 multiplied by 19,614.
117,684 rows = total number of delimited lists of City names separated by commas for each of the 6 CountryRegionCode.
6  = number of CountryRegionCodes = AU, CA, DE, FR, GB, US
19,614 = number of rows in table [AdventureWorks2022].[Person].[Address]
This subquery is at Level 4.

5.1) Cartesian Product:
The 117,684 rows resulted from the use of a Cartesian Product between Subquery Z and Subquery Iteration.
Cartesian Product: has a dimension of 6 X 19,614, meaning 117,684 rows.
Subquery Iteration: has a total of 19,614 rows.

5.2) WHERE clause and the iteration:
After adding the WHERE clause (WHERE Iteration.Position <= LEN(Z.DelimListCityName) at the end of Subquery SubstringOne, we reduce the OUTPUT from 117,684 rows to 5,657 rows.

5,657 rows = sum of the character length for the delimited lists of all 6 countries.

	CountryRegionCode	CharacterLengthDelimitedLists
	AU			421
	CA			449
	DE			356
	FR			378
	GB			359
	US			3694
	------------------------------
	Total			5,657


5.3) Function SUBSTRING and the iteration:
For each of the 5,657 rows, this function returns a string having 1 character less than the previous row each time that the iteration passes through each row.
For example, below we can see the values returned by this function for FirstName values for CountryRegionCode equals to AU and CA.

Row #	SUBSTDelimCityName								CharacterLengthDelimitedLists	CountryRegionCode
1	,Bendigo,Cloverdale,Port Macquarie,South Melbourne,.........,Wollongong,	421				AU
2	Bendigo,Cloverdale,Port Macquarie,South Melbourne,S.........,Wollongong,	421				AU
3	endigo,Cloverdale,Port Macquarie,South Melbourne,Sy.........,Wollongong,	421				AU
4	ndigo,Cloverdale,Port Macquarie,South Melbourne,Syd.........,Wollongong,	421				AU
5	digo,Cloverdale,Port Macquarie,South Melbourne,Sydn.........,Wollongong,	421				AU
6	igo,Cloverdale,Port Macquarie,South Melbourne,Sydne.........,Wollongong,	421				AU
7	go,Cloverdale,Port Macquarie,South Melbourne,Sydney.........,Wollongong,	421				AU
8	o,Cloverdale,Port Macquarie,South Melbourne,Sydney,.........,Wollongong,	421				AU
9	,Cloverdale,Port Macquarie,South Melbourne,Sydney,M.........,Wollongong,	421				AU
10	Cloverdale,Port Macquarie,South Melbourne,Sydney,Ma.........,Wollongong,	421				AU
11	loverdale,Port Macquarie,South Melbourne,Sydney,Mat.........,Wollongong,	421				AU
12	overdale,Port Macquarie,South Melbourne,Sydney,Matr.........,Wollongong,	421				AU
13	verdale,Port Macquarie,South Melbourne,Sydney,Matra.........,Wollongong,	421				AU
14	erdale,Port Macquarie,South Melbourne,Sydney,Matrav.........,Wollongong,	421				AU
15	rdale,Port Macquarie,South Melbourne,Sydney,Matravi.........,Wollongong,	421				AU
16	dale,Port Macquarie,South Melbourne,Sydney,Matravil.........,Wollongong,	421				AU
17	ale,Port Macquarie,South Melbourne,Sydney,Matravill.........,Wollongong,	421				AU
18	le,Port Macquarie,South Melbourne,Sydney,Matraville.........,Wollongong,	421				AU
19	e,Port Macquarie,South Melbourne,Sydney,Matraville,.........,Wollongong,	421				AU
....................................................... TRUNCATED RESULTS ...............................................................
410	,Wollongong,									421				AU
411	Wollongong,									421				AU
412	ollongong,									421				AU
413	llongong,									421				AU
414	longong,									421				AU
415	ongong,										421				AU
416	ngong,										421				AU
417	gong,										421				AU
418	ong,										421				AU
419	ng,										421				AU
420	g,										421				AU
421	,										421				AU
....................................................... TRUNCATED RESULTS ...............................................................
422	,Brampton,Quebec,Victoria,Montreal,Waterloo,Langley,.........,Chalk Riber,	449				CA	
423	Brampton,Quebec,Victoria,Montreal,Waterloo,Langley,.........,,Chalk Riber,	449				CA	
....................................................... TRUNCATED RESULTS ...............................................................
859	Chalk Riber,									449				CA
860	halk Riber,									449				CA
861	alk Riber,									449				CA
862	lk Riber,									449				CA
863	k Riber,									449				CA
864	 Riber,										449				CA
865	Riber,										449				CA
866	iber,										449				CA
867	ber,										449				CA
868	er,										449				CA
869	r,										449				CA
870	,										449				CA
....................................................... TRUNCATED RESULTS ...............................................................
(5657 rows affected)
(end of results)



6) Subquery "SubstringTwo": 
Function SUBSTRING (#2) uses its parameters #2 (start) and #3 (length) to extract a string starting at position 2 and ending at the position of the 2nd comma of the string. See below column "CityName"
This subquery is at Level 5.

The function is as follows: SUBSTRING(SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne.SUBSTDelimCityName, 2) - 2) AS CityName
Parameter #2 (start): starts extracting at position 2
Parameter #3 (length): number of characters to extract = CHARINDEX(',', SubstringOne.SUBSTDelimCityName, 2) - 2


Row #	SUBSTDelimCityName			osition2ndComma		LengthParam3	lenSUBSTDelimCityName	CityName
1	,Bendigo,Cloverdale,Port .....		9			7		421			Bendigo
2	Bendigo,Cloverdale,Port M.....		8			6		420			endigo		<--- This row will be filtered out by WHERE clause, see 6.1) below
3	endigo,Cloverdale,Port Ma.....		7			5		419			ndigo		<--- This row will be filtered out by WHERE clause, see 6.1) below
4	ndigo,Cloverdale,Port Mac.....		6			4		418			digo		<--- This row will be filtered out by WHERE clause, see 6.1) below
5	digo,Cloverdale,Port Macq.....		5			3		417			igo		<--- This row will be filtered out by WHERE clause, see 6.1) below
6	igo,Cloverdale,Port Macqu.....		4			2		416			go		<--- This row will be filtered out by WHERE clause, see 6.1) below
7	go,Cloverdale,Port Macqua.....		3			1		415			o		<--- This row will be filtered out by WHERE clause, see 6.1) below
8	o,Cloverdale,Port Macquar.....		2			0		414					<--- This row will be filtered out by WHERE clause, see 6.1) below
9	,Cloverdale,Port Macquari.....		12			10		413			Cloverdale
10	Cloverdale,Port Macquarie.....		11			9		412			loverdale 	<--- This row will be filtered out by WHERE clause, see 6.1) below
11	loverdale,Port Macquarie,.....		10			8		411			overdale  	<--- This row will be filtered out by WHERE clause, see 6.1) below
12	overdale,Port Macquarie,S.....		9			7		410			verdale	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
13	verdale,Port Macquarie,So.....		8			6		409			erdale	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
14	erdale,Port Macquarie,Sou.....		7			5		408			rdale	 	<--- This row will be filtered out by WHERE clause, see 6.1) below
15	rdale,Port Macquarie,Sout.....		6			4		407			dale	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
16	dale,Port Macquarie,South.....		5			3		406			ale	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
17	ale,Port Macquarie,South .....		4			2		405			le	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
18	le,Port Macquarie,South M.....		3			1		404			e	  	<--- This row will be filtered out by WHERE clause, see 6.1) below
19	e,Port Macquarie,South Me.....		2			0		403				  	<--- This row will be filtered out by WHERE clause, see 6.1) below
20	,Port Macquarie,South Mel.....		16			14		402			Port Macquarie
....................................................... TRUNCATED RESULTS ...............................................................
(5657 rows affected)
(end of results)


6.1) WHERE clause: 
It is as follows: WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','
It keeps the rows from column "SUBSTDelimCityName" that (1) has more than 1 character and (2) the first character of the string is a comma.
In the above example, it keeps row 1, filters out rows from 2 up to 8, keeps row 9, filters out rows from 10 up to 19, etc.

Below we can see the output for Subquery SubstringTwo which returns a list of multiple values (each on a separate row) that can be passed to the IN clause and used in the WHERE clause.

	-- OUTPUT
CityName
Bendigo
Cloverdale
Port Macquarie
South Melbourne
Sydney
................ TRUNCATED RESULTS .......
(579 rows affected)
(end of results)




Below are the queries used step-by-step for this solution.

	Query #1.1: Creates subquery "X" from tables [AdventureWorks2022].[Person].[Address], [AdventureWorks2022].[Person].[StateProvince] and [AdventureWorks2022].[Sales].[SalesTerritory]
	----------

SELECT PersonAddress.AddressID					-- OriginalTables1 = X
, PersonAddress.City
, PersonAddress.StateProvinceID
, StateID.StateProvinceCode
, StateID.CountryRegionCode
, StateID.TerritoryID
, SalesTerritory.Name AS TerritoryName
FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
ON PersonAddress.StateProvinceID = StateID.StateProvinceID
LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
ON StateID.TerritoryID = SalesTerritory.TerritoryID	



	-- OUTPUT
AddressID	City			StateProvinceID		StateProvinceCode	CountryRegionCode	TerritoryID	TerritoryName
532		Ottawa			57			ON 			CA			6		Canada
497		Burnaby			7			BC 			CA			6		Canada
29781		Dunkerque		145			59			FR			7		France
24231		Verrieres Le Buisson	177			91			FR			7		France
19637		Verrieres Le Buisson	177			91			FR			7		France
................ TRUNCATED RESULTS .......
15589		Sulzbach Taunus		70			SL 			DE			8		Germany
19731		Berlin			19			HE 			DE			8		Germany
15768		Neunkirchen		70			SL 			DE			8		Germany
17393		Paderborn		20			HH 			DE			8		Germany
29769		Berlin			20			HH 			DE			8		Germany
18050		München			53			NW 			DE			8		Germany
(19614 rows affected)
(end of results)





	Query #1.2: Creates subquery "Y" which removes duplicated City names from Subquery X using SELECT DISTINCT statement
	----------

SELECT DISTINCT X.City				-- UniqueCityName2 = Y
	, X.CountryRegionCode
FROM
	(
	SELECT 					-- OriginalTables1 = X
	PersonAddress.AddressID
	, PersonAddress.City
	, PersonAddress.StateProvinceID
	, StateID.StateProvinceCode
	, StateID.CountryRegionCode
	, StateID.TerritoryID
	, SalesTerritory.Name AS TerritoryName
	FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
	LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
		ON PersonAddress.StateProvinceID = StateID.StateProvinceID
	LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
		ON StateID.TerritoryID = SalesTerritory.TerritoryID			-- OriginalTables1 = X
	) AS X										-- UniqueCityName2 = Y


	-- OUTPUT
City			CountryRegionCode
Southfield		US
Seattle			US
Bendigo			AU
San Mateo		US
Saint Matthews		US
Chalk Riber		CA
................ TRUNCATED RESULTS .......
Boulogne-Billancourt	FR
Orly			FR
Salem			US
Brampton		CA
Daly City		US
Great Falls		US
(579 rows affected)
(end of results)





	Query #1.3: Creates subquery "Z" which generates delimited lists by commas from column PersonAddress.City
	----------

SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Y.City), CHAR(44)) + ',' AS DelimListCityName		-- DelimListCities3 = Z
FROM	
(
	SELECT DISTINCT X.City				-- UniqueCityName2 = Y
		, X.CountryRegionCode
	FROM
		(
		SELECT 					-- OriginalTables1 = X
		PersonAddress.AddressID
		, PersonAddress.City
		, PersonAddress.StateProvinceID
		, StateID.StateProvinceCode
		, StateID.CountryRegionCode
		, StateID.TerritoryID
		, SalesTerritory.Name AS TerritoryName
		FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
		LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
			ON PersonAddress.StateProvinceID = StateID.StateProvinceID
		LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
		ON StateID.TerritoryID = SalesTerritory.TerritoryID			-- OriginalTables1 = X
		) AS X										-- UniqueCityName2 = Y
	) AS Y	
GROUP BY Y.CountryRegionCode					-- DelimitedListCities3 = Z 


	-- OUTPUT
DelimListCityName
,Bendigo,Cloverdale,Port Macquarie,South Melbourne,Sydney,Matraville,Newcastle,St. Leonards,Lane Cove,Brisbane,Gold Coast,Hawthorne,Townsville,Seaford,Rockhampton,North Ryde,Hervey Bay,Findon,Cranbourne,Melbourne,Darlinghurst,Milsons Point,Springwood,Sunbury,Geelong,Caloundra,Malabar,Warrnambool,Hobart,Melton,Goulburn,Lavender Bay,North Sydney,Silverwater,Perth,Rhodes,Coffs Harbour,East Brisbane,Alexandria,Wollongong,
,Brampton,Quebec,Victoria,Montreal,Waterloo,Langley,Hull,Newton,Shawnee,Weston,Ottawa,Edmonton,Dorval,Langford,Mississauga,Westminster,Aurora,Haney,Kanata,Winnipeg,Calgary,Surrey,Port Hammond,Nepean,Royal Oak,Ville De'anjou,Barrie,Sooke,Saint John,Vancouver,Scarborough,Outremont,Etobicoke,Markham,Richmond Hill,Kingston,Oak Bay,Sainte-Foy,Toronto,Sillery,Richmond,Brossard,N. Vancouver,Cliffside,Burnaby,North York,Metchosin,Pnot-Rouge,Chalk Riber,
,Augsburg,Erlangen,Sulzbach Taunus,Solingen,Hamburg,Salzgitter,Ingolstadt,Werne,Saarbrücken,Eilenburg,Münster,Frankfurt,Dresden,Hannover,Essen,Mühlheim,Bonn,Offenbach,Ascheim,Muehlheim,Bottrop,München,Poing,Hof,Darmstadt,Kassel,Braunschweig,Stuttgart,Saarlouis,Duesseldorf,Frankfurt am Main,Neunkirchen,Paderborn,Kiel,Leipzig,Berlin,Bad Soden,Grevenbroich,
,Dunkerque,Les Ulis,Villeneuve-d'Ascq,Boulogne-Billancourt,Orly,Morangis,Saint Ouen,Bordeaux,Colombes,Croix,Saint Germain en Laye,Cergy,Lieusaint,Verrieres Le Buisson,Roissy en Brie,Chatou,Colomiers,Metz,Paris La Defense,Courbevoie,Versailles,Paris,Lille,Drancy,Orleans,Roubaix,Boulogne-sur-Mer,Tremblay-en-France,Suresnes,Pantin,Sèvres,Saint-Denis,Bobigny,Roncq,Aujan Mournede,
................ TRUNCATED RESULTS .......
(6 rows affected)
(end of results)





	Query #1.4: Creates subquery "SubstringOne" which returns a string having 1 character less than the previous row each time that the iteration passes through each row.
	----------

SELECT SUBSTRING(Z.DelimListCityName, Iteration.Position, LEN(Z.DelimListCityName)) AS SUBSTDelimCityName	-- SubstringOne4
FROM 
(	
SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Y.City), CHAR(44)) + ',' AS DelimListCityName			-- DelimListCities3 = Z
FROM	
	(
	SELECT DISTINCT X.City				-- UniqueCityName2 = Y
		, X.CountryRegionCode
	FROM
		(
		SELECT 					-- OriginalTables1 = X
		PersonAddress.AddressID
		, PersonAddress.City
		, PersonAddress.StateProvinceID
		, StateID.StateProvinceCode
		, StateID.CountryRegionCode
		, StateID.TerritoryID
		, SalesTerritory.Name AS TerritoryName
		FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
		LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
			ON PersonAddress.StateProvinceID = StateID.StateProvinceID
		LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
			ON StateID.TerritoryID = SalesTerritory.TerritoryID			-- OriginalTables1 = X
		) AS X										-- UniqueCityName2 = Y
	) AS Y	
	GROUP BY Y.CountryRegionCode					-- DelimitedListCities3 = Z 
	) AS Z,
	(
	SELECT ROW_NUMBER() OVER(ORDER BY AddressID) AS Position	-- Iteration3
	FROM [AdventureWorks2022].[Person].[Address]
	) AS Iteration							-- Iteration3
WHERE Iteration.Position <= LEN(Z.DelimListCityName)			-- SubstringOne4


	-- OUTPUT
SUBSTDelimCityName								
,Bendigo,Cloverdale,Port Macquarie,South Melbourne,.........,Wollongong,
Bendigo,Cloverdale,Port Macquarie,South Melbourne,S.........,Wollongong,
endigo,Cloverdale,Port Macquarie,South Melbourne,Sy.........,Wollongong,
ndigo,Cloverdale,Port Macquarie,South Melbourne,Syd.........,Wollongong,
digo,Cloverdale,Port Macquarie,South Melbourne,Sydn.........,Wollongong,
igo,Cloverdale,Port Macquarie,South Melbourne,Sydne.........,Wollongong,
go,Cloverdale,Port Macquarie,South Melbourne,Sydney.........,Wollongong,
o,Cloverdale,Port Macquarie,South Melbourne,Sydney,.........,Wollongong,
,Cloverdale,Port Macquarie,South Melbourne,Sydney,M.........,Wollongong,
Cloverdale,Port Macquarie,South Melbourne,Sydney,Ma.........,Wollongong,
loverdale,Port Macquarie,South Melbourne,Sydney,Mat.........,Wollongong,
overdale,Port Macquarie,South Melbourne,Sydney,Matr.........,Wollongong,
verdale,Port Macquarie,South Melbourne,Sydney,Matra.........,Wollongong,
erdale,Port Macquarie,South Melbourne,Sydney,Matrav.........,Wollongong,
rdale,Port Macquarie,South Melbourne,Sydney,Matravi.........,Wollongong,
dale,Port Macquarie,South Melbourne,Sydney,Matravil.........,Wollongong,
ale,Port Macquarie,South Melbourne,Sydney,Matravill.........,Wollongong,
le,Port Macquarie,South Melbourne,Sydney,Matraville.........,Wollongong,
e,Port Macquarie,South Melbourne,Sydney,Matraville,.........,Wollongong,
........................................................................... TRUNCATED RESULTS ..............
,Wollongong,								
Wollongong,								
ollongong,								
llongong,								
longong,								
ongong,									
ngong,									
gong,									
ong,									
ng,									
g,									
,									
........................................................................... TRUNCATED RESULTS ..............
(5657 rows affected)
(end of results)





	Query #1.5: Creates subquery "SubstringTwo" which keeps the rows from column "SUBSTDelimCityName" that (1) has more than 1 character and (2) the first character of the string is a comma.
		The OUTPUT returned is a list of multiple values (each on a separate row) that can be passed to the IN clause and used in the WHERE clause.
	----------

SELECT SUBSTRING(SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne.SUBSTDelimCityName, 2) - 2) AS CityName		-- SubstringTwo5
FROM (
	SELECT SUBSTRING(Z.DelimListCityName, Iteration.Position, LEN(Z.DelimListCityName)) AS SUBSTDelimCityName	-- SubstringOne4
	FROM 
	(	
	SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Y.City), CHAR(44)) + ',' AS DelimListCityName		-- DelimListCities3 = Z
	FROM	
		(
		SELECT DISTINCT X.City				-- UniqueCityName2 = Y
			, X.CountryRegionCode
		FROM
			(
			SELECT 					-- OriginalTables1 = X
			PersonAddress.AddressID
			, PersonAddress.City
			, PersonAddress.StateProvinceID
			, StateID.StateProvinceCode
			, StateID.CountryRegionCode
			, StateID.TerritoryID
			, SalesTerritory.Name AS TerritoryName
			FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
			LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
				ON PersonAddress.StateProvinceID = StateID.StateProvinceID
			LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
				ON StateID.TerritoryID = SalesTerritory.TerritoryID			-- OriginalTables1 = X
			) AS X										-- UniqueCityName2 = Y
		) AS Y	
		GROUP BY Y.CountryRegionCode					-- DelimitedListCities3 = Z 
		) AS Z,
		(
		SELECT ROW_NUMBER() OVER(ORDER BY AddressID) AS Position	-- Iteration3
		FROM [AdventureWorks2022].[Person].[Address]
		) AS Iteration							-- Iteration3
	WHERE Iteration.Position <= LEN(Z.DelimListCityName)			-- SubstringOne4
	) AS SubstringOne
WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','			-- SubstringTwo5


	-- OUTPUT
CityName
Bendigo
Cloverdale
Port Macquarie
South Melbourne
Sydney
Matraville
Newcastle
................ TRUNCATED RESULTS ................
Saginaw
Lincoln Acres
Racine
Orange
Casper
Carol Stream
Elk Grove
Carson
(579 rows affected)
(end of results)







Solution #2: As an alternative for solution #1, below we show how we can solve this exercise using Common Table Expression (CTEs).

	Query #2: Solving this exercise usisng Common Table Expression (CTEs)
		+ 7 Subqueries
		+ 2 Cartesian Products
		+ 2 Iterations
		+ Window Function: ROW_NUMBER() OVER(ORDER BY )
		+ Functions: SUBSTRING, CHARINDEX, LEN, STRING_AGG, CONVERT, NVARCHAR(max), CHAR
		+ SELECT DISTINCT

WITH
Subquery_X AS
( 
	SELECT PersonAddress.AddressID								-- OriginalTables1 = X
	, PersonAddress.City
	, PersonAddress.StateProvinceID
	, StateID.StateProvinceCode
	, StateID.CountryRegionCode
	, StateID.TerritoryID
	, SalesTerritory.Name AS TerritoryName
	FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
	LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
	ON PersonAddress.StateProvinceID = StateID.StateProvinceID
	LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
	ON StateID.TerritoryID = SalesTerritory.TerritoryID					-- OriginalTables1 = X
), 
Subquery_Y AS
(
	SELECT DISTINCT Subquery_X.City					-- UniqueCityName2 = Y
		, Subquery_X.CountryRegionCode
	FROM Subquery_X							-- UniqueCityName2 = Y
), 
Subquery_Z AS
(
	SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Subquery_Y.City), CHAR(44)) + ',' AS DelimListCityName		-- DelimListCities3 = Z
	FROM Subquery_Y
	GROUP BY Subquery_Y.CountryRegionCode					-- DelimitedListCities3 = Z 
), 
Iteration AS 
(
	SELECT ROW_NUMBER() OVER(ORDER BY AddressID) AS Position			-- Iteration3
	FROM [AdventureWorks2022].[Person].[Address]					-- Iteration3
), 
SubstringOne4 AS 
(
	SELECT SUBSTRING(Subquery_Z.DelimListCityName, Iteration.Position, LEN(Subquery_Z.DelimListCityName)) AS SUBSTDelimCityName	-- SubstringOne4
	FROM Subquery_Z, Iteration
	WHERE Iteration.Position <= LEN(Subquery_Z.DelimListCityName)					-- SubstringOne4
),
SubstringTwo5 AS 
( 
	SELECT SUBSTRING(SubstringOne4.SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne4.SUBSTDelimCityName, 2) - 2) AS CityName		-- SubstringTwo5
	FROM SubstringOne4
	WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','								-- SubstringTwo5
) 
SELECT AddressLine1
FROM [AdventureWorks2022].[Person].[Address] 
WHERE City IN	(
		SELECT SUBSTRING(SubstringOne4.SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne4.SUBSTDelimCityName, 2) - 2) AS CityName	-- SubstringTwo5
		FROM SubstringOne4
		WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','
		)																-- SubstringTwo5
ORDER BY City


	-- OUTPUT
City		AddressLine1
Abingdon	New Millhouse, 2583 Milton Park
Albany		1619 Mills Dr.
Albany		2255 254th Avenue Se
Albany		9098 Story Lane
Albany		Heritage Mall
.......................................... TRUNCATED RESULTS .........
Berlin		8783 Detroit Ave.
Berlin		Alderstr 3955
.......................................... TRUNCATED RESULTS .........
London		1005 Valley Oak Plaza
London		1019 Mt. Davidson Court
.......................................... TRUNCATED RESULTS .........
New York	123 Union Square South
New York	2596 Big Canyon Road
.......................................... TRUNCATED RESULTS .........
York		2050 B Avenue I
Zeeland		855 East Main Avenue
(19614 rows affected)
(end of results)






Solution #2.1: We can also store the list of cities from SubstringTwo5 into variable "CitiesforINclause", that is called on last SELECT statement.

	Query #2.1: Solving this exercise usisng Common Table Expression (CTEs)
		+ 7 Subqueries
		+ 2 Cartesian Products
		+ 2 Iterations
		+ Window Function: ROW_NUMBER() OVER(ORDER BY )
		+ Functions: SUBSTRING, CHARINDEX, LEN, STRING_AGG, CONVERT, NVARCHAR(max), CHAR
		+ SELECT DISTINCT
		+ 1 variable ("CitiesforINclause") that stores the values for IN clause

WITH
Subquery_X AS
( 
	SELECT PersonAddress.AddressID					-- OriginalTables1 = X
	, PersonAddress.City
	, PersonAddress.StateProvinceID
	, StateID.StateProvinceCode
	, StateID.CountryRegionCode
	, StateID.TerritoryID
	, SalesTerritory.Name AS TerritoryName
	FROM [AdventureWorks2022].[Person].[Address] AS PersonAddress
	LEFT JOIN [AdventureWorks2022].[Person].[StateProvince] AS StateID
	ON PersonAddress.StateProvinceID = StateID.StateProvinceID
	LEFT JOIN [AdventureWorks2022].[Sales].[SalesTerritory] AS SalesTerritory
	ON StateID.TerritoryID = SalesTerritory.TerritoryID							-- OriginalTables1 = X
), 
Subquery_Y AS
(
	SELECT DISTINCT Subquery_X.City					-- UniqueCityName2 = Y
		, Subquery_X.CountryRegionCode
	FROM Subquery_X									-- UniqueCityName2 = Y
), 
Subquery_Z AS
(
	SELECT ',' + STRING_AGG (CONVERT(NVARCHAR(max),Subquery_Y.City), CHAR(44)) + ',' AS DelimListCityName		-- DelimListCities3 = Z
	FROM Subquery_Y
	GROUP BY Subquery_Y.CountryRegionCode					-- DelimitedListCities3 = Z 
), 
Iteration AS 
(
	SELECT ROW_NUMBER() OVER(ORDER BY AddressID) AS Position			-- Iteration3
	FROM [AdventureWorks2022].[Person].[Address]						-- Iteration3
), 
SubstringOne4 AS 
(
	SELECT SUBSTRING(Subquery_Z.DelimListCityName, Iteration.Position, LEN(Subquery_Z.DelimListCityName)) AS SUBSTDelimCityName	-- SubstringOne4
	FROM Subquery_Z, Iteration
	WHERE Iteration.Position <= LEN(Subquery_Z.DelimListCityName)					-- SubstringOne4
),
SubstringTwo5 AS 
( 
	SELECT CitiesforINclause = SUBSTRING(SubstringOne4.SUBSTDelimCityName, 2, CHARINDEX(',', SubstringOne4.SUBSTDelimCityName, 2) - 2) -- AS CityName		-- SubstringTwo5
	FROM SubstringOne4
	WHERE LEN(SUBSTDelimCityName) > 1 AND SUBSTRING(SUBSTDelimCityName, 1, 1) = ','					-- SubstringTwo5
) 
SELECT AddressLine1
FROM [AdventureWorks2022].[Person].[Address] 
WHERE City IN	(
		SELECT CitiesforINclause
		FROM SubstringTwo5
		)
ORDER BY City


	-- OUTPUT
We get the same results as in Query #2.
(19614 rows affected)
(end of results)
